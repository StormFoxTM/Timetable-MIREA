version: "3.9"

services:

  postgres:
    hostname: timetable.postgres
    build: 
      context: ./
      dockerfile:   postgresql/Dockerfile.postgres
    restart: on-failure:5
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${DB_NAME} -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./postgresql/data:/var/lib/postgresql/data
    
  web:
    hostname: timetable.mirea
    build:
      context: ./
      dockerfile: web-site/Dockerfile.web-site
    restart: on-failure:5
    env_file:
      - .env
    healthcheck:
      test: curl -sS http://timetable.mirea:3000 || echo 1
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy

  api:
    hostname: api.mirea
    build:
      context: ./
      dockerfile: api/Dockerfile.api
    restart: on-failure:5
    stdin_open: true
    tty: true
    env_file:
      - .env
    healthcheck:
      test: curl -sS http://api.timetable:9888/api/timetable || echo 1
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: '4g'

  nginx:
    build:
      context: ./
      dockerfile: nginx/Dockerfile.nginx
    restart: on-failure:5
    ports:
      - '8080:8080'
    depends_on:
      api:
        condition: service_healthy
      web:
        condition: service_healthy

  parser:
    hostname: parser.mirea
    build:
      context: ./
      dockerfile: parser/Dockerfile.parser
    restart: on-failure:5
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: '3g'

  telegram:
    hostname: telegram.mirea
    build:
      context: ./
      dockerfile: telegram-bot/Dockerfile.telegram-bot
    restart: on-failure:5
    stdin_open: true
    tty: true
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; res = requests.get('https://t.me/stormcrown_bot'); exit(0) if res.status_code == 200 else exit(1)"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      api:
        condition: service_healthy